renv::init()
renv::snapshot()
reticulate::repl_python()
quit
library(palmerpenguins)
renv::init()
renv::snapshot()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Install and load reticulate package
if (!requireNamespace("reticulate", quietly = TRUE)) {
install.packages("reticulate")
}
library(reticulate)
# Create and activate virtual environment
virtualenv_create("myenv")
virtualenv_activate("myenv")
# Install and load reticulate package
if (!requireNamespace("reticulate", quietly = TRUE)) {
install.packages("reticulate")
}
library(reticulate)
# Create and activate virtual environment
virtualenv_create("myenv")
virtualenv_activate("myenv")
# Install and load reticulate package
if (!requireNamespace("reticulate", quietly = TRUE)) {
install.packages("reticulate")
}
library(reticulate)
# Create and activate virtual environment
virtualenv_create("myenv")
# Install Python packages
py_install("numpy")
# Install and load reticulate package
if (!requireNamespace("reticulate", quietly = TRUE)) {
install.packages("reticulate")
}
library(reticulate)
# Create and activate virtual environment
virtualenv_create("myenv")
# Install Python packages
py_install("numpy")
# Execute Python code
py_run_string("print('Hello, world!')")
reticulate::repl_python()
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
install.packages("vetiver")
quit
install.packages("vetiver")
library(vetiver)
reticulate::repl_python()
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
quit
library(vetiver)
detach("package:vetiver", unload = TRUE)
library(vetiver)
reticulate::repl_python()
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
quit
library(vetiver)
reticulate::repl_python()
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
quit
renv::init()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
