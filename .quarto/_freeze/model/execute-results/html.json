{
  "hash": "f0ecdee6c2cfa597d390429d9d945761",
  "result": {
    "markdown": "---\ntitle: \"Model\"\nformat:\n  html:\n    code-fold: true\n---\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n```\n:::\n\n\n## Get Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nuse_virtualenv(\"C:\\\\Users\\\\C25Lance.Garcia\\\\OneDrive - afacademy.af.edu\\\\Documents\\\\1 Spring 2024\\\\MATH 378\\\\Final Project\\\\venv\"\n, required = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport duckdb\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]\n```\n:::\n:::\n\n\n## Define Model and Fit\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Intercept {model.intercept_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIntercept 2169.269720939398\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Columns {X.columns}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\n```\n:::\n\n```{.python .cell-code}\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n:::\n:::\n\n\n## Turn into Vetiver Model\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n```\n:::\n\n\n## Save to Board\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\n\nmodel_board = board_folder(\"/data/model\", allow_pickle_read = True)\nvetiver_pin_write(model_board, v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240425T152130Z-a6f9b\n```\n:::\n:::\n\n\n## Turn model into API\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}